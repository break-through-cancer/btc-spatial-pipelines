nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"

    test("Just check samplesheet and read visium to adata") {

        tag "samplesheet"

        when {
            params {
                input = "../../../tests/samplesheet-test.csv"
                deconvolve {
                    external = false
                    bayestme = false
                    cogaps   = false
                    rctd     = false
                }
                outdir = "output"
                max_memory = "8.GB"
                max_cpus = 4
            }
        }

        then {
            assertAll (
                { assert workflow.success },
                { assert file("${outputDir}/pipeline_info/samplesheet.valid.csv").exists() }
            )

        }

    }

        test("Fail on empty samplesheet") {

        tag "samplesheet"

        when {
            params {
                input = "../../../tests/samplesheet-empty-test.csv"
                max_memory = "8.GB"
                max_cpus = 4
            }
        }

        then {
            assert workflow.success == false
        }

    }

    test("RCTD on Visium SD with local ref") {

        tag "local"

        when {
            params {
                input = "../../../tests/localatlas-test.csv"
                max_memory = "8.GB"
                max_cpus = 4
                deconvolve {
                    bayestme = false
                    cogaps = false
                    rctd = true
                    external = false
                }
                analyze {
                    spacemarkers = false
                    squidpy = false
                }
            }
        }

        then {
            assertAll { 
                assert workflow.success 
            }


        }
    }

    test("RCTD on Multisample Visium SD with local ref") {

        tag "multisample"

        when {
            params {
                input = "../../../tests/multisample-test.csv"
                max_memory = "8.GB"
                max_cpus = 4
                deconvolve {
                    bayestme = false
                    cogaps = false
                    rctd = true
                }
                analyze {
                    spacemarkers = false
                    squidpy = true
                }
            }
        }

        then {
            assertAll(
                { assert workflow.success }
            )

        }
    }

    test("Full pipeline on Visium SD with remote ref") {

        tag "visiumsd"

        when {
            params {
                input = "../../../tests/sdvisium-test.csv"
                max_memory = "8.GB"
                max_cpus = 4
                deconvolve {
                    bayestme = false
                    cogaps = false
                    rctd = true
                    external = false
                }
                analyze {
                    spacemarkers = true
                    squidpy = true
                }
                outdir = "output"
                ref_scrna = "https://datasets.cellxgene.cziscience.com/6c29f947-d85b-483e-b346-b163277dae5e.h5ad"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert file("${outputDir}/adata/sample1/visium.h5ad").exists() },
                { assert file("${outputDir}/atlas/${params.ref_scrna.tokenize("/")[-1]}").exists() },
                { assert file("${outputDir}/atlas/sample1/adata_matched.h5ad").exists() },
                { assert file("${outputDir}/rctd/sample1/rctd_cell_types.csv").exists() },
                { assert file("${outputDir}/spacemarkers/sample1/rctd_cell_types/spacemarkers.csv").exists() },
                { assert file("${outputDir}/squidpy/sample1/figures/spatial_scatter.png").exists() }
            )
        }

    }


    test("Full pipeline on Visium HD with remote ref") {

        tag "visiumhd"

        when {
            params {
                input = "../../../tests/hdvisium-test.csv"
                max_memory = "8.GB"
                max_cpus = 4
                deconvolve {
                    bayestme = false
                    cogaps = false
                    rctd = true
                    external = false
                }
                analyze {
                    spacemarkers = true
                    squidpy = true
                }
                visium_hd = "square_016um"
                outdir = "output"
                ref_scrna = "https://datasets.cellxgene.cziscience.com/6c29f947-d85b-483e-b346-b163277dae5e.h5ad"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert file("${outputDir}/adata/sample1/${params.visium_hd}.h5ad").exists() },
                { assert file("${outputDir}/atlas/${params.ref_scrna.tokenize("/")[-1]}").exists() },
                { assert file("${outputDir}/atlas/sample1/adata_matched.h5ad").exists() },
                { assert file("${outputDir}/rctd/sample1/rctd_cell_types.csv").exists() },
                { assert file("${outputDir}/spacemarkers/sample1/rctd_cell_types/LRscores.rds").exists() },
                { assert file("${outputDir}/squidpy/sample1/figures/spatial_scatter.png").exists() }
            )
        }
    }


    test("BayesTME pipeline on Visium SD") {

        tag "bayestme"

        when {
            params {
                input = "../../../tests/sdvisium-test.csv"
                max_memory = "8.GB"
                max_cpus = 4
                deconvolve {
                    bayestme = true
                    cogaps = false
                    rctd = false
                    external = false
                }
                analyze {
                    spacemarkers = false
                    squidpy = false
                }
            }
        }

        then {
            assert workflow.success
        }

    }

}
